apiVersion: v1
kind: ConfigMap
metadata:
  name: nsx-node-agent-restarter-script
  namespace: nsx-system-restarter
data:
  restart-nsx-node-agents.sh: "#!/usr/bin/env bash\n\n# Bash \"fail fast\" mode. See
    https://sipb.mit.edu/doc/safe-shell/ and https://stackoverflow.com/a/35800451\n#
    In this script it is important in order to manage \"oc\" failures (ex. timeouts)\nset
    -eEo pipefail\n\necho \"INFO Starting operations\"\n\n# List and count ALL nsx_node_agent
    pods\n# IFS=$'\\n' nsx_node_agent_pods_all=($(oc get pods --no-headers -o name
    -n nsx-system -l component==nsx-node-agent)) # NOTE https://www.shellcheck.net/wiki/SC2207\nmapfile
    -t nsx_node_agent_pods_all < <(oc get pods --no-headers -o name -n nsx-system
    -l component==nsx-node-agent)\necho \"INFO nsx_node_agent Pods all list:\"\nprintf
    '%s\\n' \"${nsx_node_agent_pods_all[@]}\" | sort\nnsx_node_agent_pods_all_n=${#nsx_node_agent_pods_all[@]}\necho
    \"INFO nsx_node_agent Pods all count:\"\necho \"${nsx_node_agent_pods_all_n}\"\n#
    List and count only FULLY RUNNING (= all containers ok) nsx_node_agent pods\n#
    IFS=$'\\n' nsx_node_agent_pods_running=($(oc get pods --no-headers -n nsx-system
    -l component==nsx-node-agent --field-selector status.phase==Running | grep -P
    '(\\d+)\\/\\1[^\\d]' | awk '{print \"pod/\"$1}')) # NOTE https://www.shellcheck.net/wiki/SC2207\nmapfile
    -t nsx_node_agent_pods_running < <(oc get pods --no-headers -n nsx-system -l component==nsx-node-agent
    --field-selector status.phase==Running | grep -P '(\\d+)\\/\\1[^\\d]' | awk '{print
    \"pod/\"$1}')\necho \"INFO nsx_node_agent Pods running list:\"\nprintf '%s\\n'
    \"${nsx_node_agent_pods_running[@]}\" | sort\nnsx_node_agent_pods_running_n=${#nsx_node_agent_pods_running[@]}\necho
    \"INFO nsx_node_agent Pods running count:\"\necho \"${nsx_node_agent_pods_running_n}\"\n\n#
    The following should come from env variables. If not, it uses their default values.\necho
    \"INFO Value of WAIT_DELETE_MINUTES is ${WAIT_DELETE_MINUTES:=1}\"\necho \"INFO
    Value of WAIT_CREATE_MINUTES is ${WAIT_CREATE_MINUTES:=2}\"\necho \"INFO Value
    of DELAY_RESTART_MINUTES is ${DELAY_RESTART_MINUTES:=15}\"\n\necho \"INFO Total
    count of Pods to restart is ${nsx_node_agent_pods_all_n}\"\nfor nsx_node_agent_pod
    in \"${nsx_node_agent_pods_all[@]}\"; do\n  pods_to_restart_n=$(( ${nsx_node_agent_pods_all_n}
    - ${pods_restarted_n} ))\n  echo \"INFO Count of remaining Pods to restart is
    $(( ${pods_to_restart_n} ))\"\n\n  echo \"INFO Next Pod is ${nsx_node_agent_pod}\"\n
    \ node_of_pod=$(oc get pod ${nsx_node_agent_pod} -n nsx-system -o jsonpath='{.spec.nodeName}')
    # NOTE Since nsx_node_agent are in a DaemonSet, the Node will be the same also
    for the new Pod\n  echo \"INFO Pod ${nsx_node_agent_pod} is on Node ${node_of_pod}\"\n
    \ \n  echo \"INFO Deleting Pod ${nsx_node_agent_pod}\"\n  echo \"INFO Waiting
    for deletion of Pod ${nsx_node_agent_pod} ...\"\n  oc delete ${nsx_node_agent_pod}
    -n nsx-system\n  oc wait -n nsx-system --for=delete ${nsx_node_agent_pod} --timeout=$((
    ${WAIT_DELETE_MINUTES} * 60 ))s\n  \n  echo \"INFO Waiting for new Pod on node
    ${node_of_pod} ...\"\n  oc wait -n nsx-system -l component==nsx-node-agent --field-selector
    status.phase==Running,spec.nodeName=${node_of_pod} --for=condition=Running ${nsx_node_agent_pod}
    --timeout=$(( ${WAIT_CREATE_MINUTES} * 60 ))s\n  # Check that all containers of
    Pod are running. Adding 60s delay to try catching situations whether the Containers
    are restaring\n  sleep 60; nsx_node_agent_pod_new=$(oc get pods --no-headers -n
    nsx-system -l component==nsx-node-agent --field-selector status.phase==Running,spec.nodeName=${node_of_pod}
    | grep -P '(\\d+)\\/\\1[^\\d]' | awk '{print \"pod/\"$1}')\n  if [[ -n $(nsx_node_agent_pod_new)
    ]]; then\n    echo \"INFO Pod ${nsx_node_agent_pod_new} and its containers are
    running\"\n  else\n    echo \"ERROR Pod ${nsx_node_agent_pod_new} or its containers
    failed to run\"\n\techo \"ERROR Current status of Pod ${nsx_node_agent_pod_new}:\"\n\toc
    get pods --no-headers -n nsx-system ${nsx_node_agent_pod_new}\n\texit 1\n  fi\n
    \ \n  (( pods_restarted_n++ ))\n  if [[ ${pods_restarted_n} -ne ${nsx_node_agent_pods_all_n}
    ]]; then\n    echo \"INFO Waiting ${DELAY_RESTART_MINUTES} minutes before restarting
    next Pod\"\n\techo \"INFO Next Pod will be restarted at:\" $(date -u -d \"now
    +${DELAY_RESTART_MINUTES}min\")\n    sleep $(( ${DELAY_RESTART_MINUTES} * 60 ))\n
    \ else\n    echo \"INFO All nsx_node_agent Pods restarted\"\n  fi\ndone\n\necho
    \"INFO All operations completed\""
